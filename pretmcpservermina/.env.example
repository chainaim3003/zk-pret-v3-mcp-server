# =============================================================================
# ZK-PRET MCP Server Configuration
# =============================================================================

# Server Configuration
NODE_ENV=development
SERVER_NAME=zkpret-mcp-server-mina
LOG_LEVEL=info
LOG_DIR=./logs
ENABLE_FILE_LOGGING=true

# MCP Server Configuration
MCP_TRANSPORT=stdio
# Options: stdio (for Claude Desktop), sse (for web/HTTP API)

# SSE Server Configuration (when using SSE transport)
SSE_PORT=3001
SSE_HOST=localhost
CORS_ORIGIN=*
# For multiple origins: CORS_ORIGIN=http://localhost:3000,https://app.example.com

# Mina Blockchain Configuration
MINA_NETWORK=local
# Options: local, devnet, testnet, mainnet

# Wallet Configuration
WALLET_TYPE=private_key
# Options: private_key, browser

# Private Key Wallet (Base58 encoded)
# Generate with: node build/scripts/generate-keys.js
MINA_PRIVATE_KEY=EKE...
# Example: EKEQtA8bHPUZ8SmQKJLhZNKVLQhfCCKGdKNGWE8Z5QJuBgNnJ7tW

# =============================================================================
# External Services Configuration
# =============================================================================

# GLEIF API Configuration
GLEIF_API_URL=https://api.gleif.org/api/v1
GLEIF_API_KEY=
# Optional: Enhanced rate limits and features
GLEIF_TIMEOUT=30000

# ACTUS Server Configuration
ACTUS_SERVER_URL=http://98.84.165.146:8083
ACTUS_SERVER_LOCAL=http://localhost:8083
ACTUS_SERVER_MODE=remote
# Options: remote (hosted), local (Docker)
ACTUS_TIMEOUT=60000

# Docker Configuration (for local ACTUS server)
DOCKER_ENABLED=true
DOCKER_HOST=unix:///var/run/docker.sock

# =============================================================================
# Security Configuration
# =============================================================================

# JWT Secret (for API authentication if needed)
JWT_SECRET=your-super-secret-jwt-key-here

# API Rate Limiting
API_RATE_LIMIT=100
API_RATE_WINDOW=900000
# 900000ms = 15 minutes

# CORS Configuration
ENABLE_CORS=true

# =============================================================================
# Performance Configuration
# =============================================================================

# Caching
CACHE_ENABLED=true
CACHE_TTL=3600
# 3600 seconds = 1 hour

# Redis Configuration (optional, for distributed caching)
REDIS_URL=redis://localhost:6379

# Request Handling
MAX_CONCURRENT_REQUESTS=50
REQUEST_TIMEOUT=30000
# 30000ms = 30 seconds

# =============================================================================
# Testing Configuration
# =============================================================================

# Test Environment
TEST_NETWORK=local
# Options: local, devnet, testnet (never mainnet for tests)

TEST_TIMEOUT=60000
# 60000ms = 60 seconds per test

TEST_PARALLEL=false
# Set to true for faster test execution (requires more resources)

ENABLE_MOCK_SERVICES=false
# Set to true to use mock services for faster testing

# =============================================================================
# Monitoring and Metrics
# =============================================================================

# Monitoring
ENABLE_METRICS=true
METRICS_PORT=9090
HEALTH_CHECK_INTERVAL=30000
# 30000ms = 30 seconds

# Verbose Logging (development only)
DEBUG_MODE=false
VERBOSE_LOGGING=false

# =============================================================================
# Database Configuration (Optional)
# =============================================================================

# Database Type
DB_TYPE=memory
# Options: memory, sqlite, postgres

# PostgreSQL Configuration (if using postgres)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=zkpret_mcp
DB_USER=zkpret
DB_PASSWORD=your-secure-password
DATABASE_URL=postgresql://zkpret:your-secure-password@localhost:5432/zkpret_mcp

# SQLite Configuration (if using sqlite)
SQLITE_PATH=./data/zkpret.db

# =============================================================================
# Contract Deployment Configuration
# =============================================================================

# Default Gas Settings
DEFAULT_GAS_LIMIT=100000
DEFAULT_GAS_PRICE=1000000000
# 1 Gwei in nanoMINA

# Contract Deployment Settings
AUTO_DEPLOY_CONTRACTS=false
CONTRACT_DEPLOYMENT_TIMEOUT=300000
# 300000ms = 5 minutes

# Verification Settings
ENABLE_CONTRACT_VERIFICATION=true
VERIFICATION_TIMEOUT=60000

# =============================================================================
# Development Configuration
# =============================================================================

# Development Mode
DEV_MODE=true
HOT_RELOAD=true
AUTO_RESTART=true

# Source Maps
GENERATE_SOURCE_MAPS=true

# TypeScript Configuration
TS_NODE_TRANSPILE_ONLY=true
TS_NODE_FILES=true

# =============================================================================
# CI/CD Configuration
# =============================================================================

# CI Environment Detection
CI=false
GITHUB_ACTIONS=false
GITLAB_CI=false

# Build Configuration
BUILD_OPTIMIZATION=false
MINIFY_BUILD=false

# =============================================================================
# Advanced Configuration
# =============================================================================

# Memory Management
NODE_OPTIONS=--max-old-space-size=4096
UV_THREADPOOL_SIZE=16

# Network Timeouts
NETWORK_TIMEOUT=30000
BLOCKCHAIN_SYNC_TIMEOUT=120000

# Proof Generation Settings
PROOF_CACHE_SIZE=1000
PROOF_GENERATION_TIMEOUT=180000
# 180000ms = 3 minutes

# Batch Processing
BATCH_SIZE=10
BATCH_TIMEOUT=5000

# =============================================================================
# Example Network-Specific Configurations
# =============================================================================

# Uncomment and modify based on your target network

# # Local Network (Lightweight Mina node)
# MINA_NETWORK=local
# MINA_GRAPHQL_URL=http://localhost:3085/graphql
# MINA_ARCHIVE_URL=http://localhost:3086

# # Devnet Configuration
# MINA_NETWORK=devnet
# MINA_GRAPHQL_URL=https://api.minascan.io/node/devnet/v1/graphql
# MINA_ARCHIVE_URL=https://api.minascan.io/archive/devnet/v1/graphql

# # Testnet Configuration  
# MINA_NETWORK=testnet
# MINA_GRAPHQL_URL=https://api.minascan.io/node/testnet/v1/graphql
# MINA_ARCHIVE_URL=https://api.minascan.io/archive/testnet/v1/graphql

# # Mainnet Configuration (Production)
# MINA_NETWORK=mainnet
# MINA_GRAPHQL_URL=https://api.minascan.io/node/mainnet/v1/graphql
# MINA_ARCHIVE_URL=https://api.minascan.io/archive/mainnet/v1/graphql

# =============================================================================
# Integration Endpoints
# =============================================================================

# Claude Desktop MCP Configuration
# Add this server to your Claude Desktop config:
# {
#   "mcpServers": {
#     "zkpret-mcp-server-mina": {
#       "command": "node",
#       "args": ["path/to/build/stdio-server.js"],
#       "env": {
#         "MINA_NETWORK": "devnet",
#         "MINA_PRIVATE_KEY": "your-private-key"
#       }
#     }
#   }
# }

# Web Integration (SSE Transport)
# Access via: http://localhost:3001/message
# Health check: http://localhost:3001/health
# Status: http://localhost:3001/status

# =============================================================================
# Security Notes
# =============================================================================

# 1. Never commit real private keys to version control
# 2. Use environment-specific .env files (.env.local, .env.production)
# 3. Rotate API keys and secrets regularly
# 4. Use strong, unique passwords for database connections
# 5. Enable HTTPS in production environments
# 6. Restrict CORS origins in production
# 7. Use secure JWT secrets (minimum 256 bits)
# 8. Enable rate limiting for public APIs
# 9. Regularly update dependencies for security patches
# 10. Monitor logs for suspicious activities

# =============================================================================
# Performance Notes
# =============================================================================

# 1. Adjust NODE_OPTIONS based on available system memory
# 2. Enable caching for better performance
# 3. Use connection pooling for database connections
# 4. Set appropriate timeouts based on network conditions
# 5. Monitor resource usage and adjust limits accordingly
# 6. Use batch processing for multiple operations
# 7. Enable compression for HTTP responses
# 8. Optimize log levels for production (info or warn)
# 9. Use CDN for static assets if serving web content
# 10. Consider horizontal scaling for high-load scenarios